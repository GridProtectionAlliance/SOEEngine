#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FaultData.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MeterDB")]
	public partial class FileInfoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataFile(DataFile instance);
    partial void UpdateDataFile(DataFile instance);
    partial void DeleteDataFile(DataFile instance);
    partial void InsertFileGroup(FileGroup instance);
    partial void UpdateFileGroup(FileGroup instance);
    partial void DeleteFileGroup(FileGroup instance);
    #endregion
		
		public FileInfoDataContext() : 
				base(global::FaultData.Properties.Settings.Default.MeterDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FileInfoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileInfoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileInfoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileInfoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataFile> DataFiles
		{
			get
			{
				return this.GetTable<DataFile>();
			}
		}
		
		public System.Data.Linq.Table<FileGroup> FileGroups
		{
			get
			{
				return this.GetTable<FileGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataFile")]
	public partial class DataFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FileGroupID;
		
		private string _FilePath;
		
		private long _FileSize;
		
		private System.DateTime _CreationTime;
		
		private System.DateTime _LastWriteTime;
		
		private System.DateTime _LastAccessTime;
		
		private EntityRef<FileGroup> _FileGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileGroupIDChanging(int value);
    partial void OnFileGroupIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileSizeChanging(long value);
    partial void OnFileSizeChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnLastWriteTimeChanging(System.DateTime value);
    partial void OnLastWriteTimeChanged();
    partial void OnLastAccessTimeChanging(System.DateTime value);
    partial void OnLastAccessTimeChanged();
    #endregion
		
		public DataFile()
		{
			this._FileGroup = default(EntityRef<FileGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileGroupID", DbType="Int NOT NULL")]
		public int FileGroupID
		{
			get
			{
				return this._FileGroupID;
			}
			set
			{
				if ((this._FileGroupID != value))
				{
					if (this._FileGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FileGroupID = value;
					this.SendPropertyChanged("FileGroupID");
					this.OnFileGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="BigInt NOT NULL")]
		public long FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWriteTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastWriteTime
		{
			get
			{
				return this._LastWriteTime;
			}
			set
			{
				if ((this._LastWriteTime != value))
				{
					this.OnLastWriteTimeChanging(value);
					this.SendPropertyChanging();
					this._LastWriteTime = value;
					this.SendPropertyChanged("LastWriteTime");
					this.OnLastWriteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAccessTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastAccessTime
		{
			get
			{
				return this._LastAccessTime;
			}
			set
			{
				if ((this._LastAccessTime != value))
				{
					this.OnLastAccessTimeChanging(value);
					this.SendPropertyChanging();
					this._LastAccessTime = value;
					this.SendPropertyChanged("LastAccessTime");
					this.OnLastAccessTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileGroup_DataFile", Storage="_FileGroup", ThisKey="FileGroupID", OtherKey="ID", IsForeignKey=true)]
		public FileGroup FileGroup
		{
			get
			{
				return this._FileGroup.Entity;
			}
			set
			{
				FileGroup previousValue = this._FileGroup.Entity;
				if (((previousValue != value) 
							|| (this._FileGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileGroup.Entity = null;
						previousValue.DataFiles.Remove(this);
					}
					this._FileGroup.Entity = value;
					if ((value != null))
					{
						value.DataFiles.Add(this);
						this._FileGroupID = value.ID;
					}
					else
					{
						this._FileGroupID = default(int);
					}
					this.SendPropertyChanged("FileGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileGroup")]
	public partial class FileGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DataStartTime;
		
		private System.DateTime _DataEndTime;
		
		private System.DateTime _ProcessingStartTime;
		
		private System.DateTime _ProcessingEndTime;
		
		private int _Error;
		
		private EntitySet<DataFile> _DataFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDataStartTimeChanging(System.DateTime value);
    partial void OnDataStartTimeChanged();
    partial void OnDataEndTimeChanging(System.DateTime value);
    partial void OnDataEndTimeChanged();
    partial void OnProcessingStartTimeChanging(System.DateTime value);
    partial void OnProcessingStartTimeChanged();
    partial void OnProcessingEndTimeChanging(System.DateTime value);
    partial void OnProcessingEndTimeChanged();
    partial void OnErrorChanging(int value);
    partial void OnErrorChanged();
    #endregion
		
		public FileGroup()
		{
			this._DataFiles = new EntitySet<DataFile>(new Action<DataFile>(this.attach_DataFiles), new Action<DataFile>(this.detach_DataFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataStartTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime DataStartTime
		{
			get
			{
				return this._DataStartTime;
			}
			set
			{
				if ((this._DataStartTime != value))
				{
					this.OnDataStartTimeChanging(value);
					this.SendPropertyChanging();
					this._DataStartTime = value;
					this.SendPropertyChanged("DataStartTime");
					this.OnDataStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataEndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime DataEndTime
		{
			get
			{
				return this._DataEndTime;
			}
			set
			{
				if ((this._DataEndTime != value))
				{
					this.OnDataEndTimeChanging(value);
					this.SendPropertyChanging();
					this._DataEndTime = value;
					this.SendPropertyChanged("DataEndTime");
					this.OnDataEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessingStartTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ProcessingStartTime
		{
			get
			{
				return this._ProcessingStartTime;
			}
			set
			{
				if ((this._ProcessingStartTime != value))
				{
					this.OnProcessingStartTimeChanging(value);
					this.SendPropertyChanging();
					this._ProcessingStartTime = value;
					this.SendPropertyChanged("ProcessingStartTime");
					this.OnProcessingStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessingEndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ProcessingEndTime
		{
			get
			{
				return this._ProcessingEndTime;
			}
			set
			{
				if ((this._ProcessingEndTime != value))
				{
					this.OnProcessingEndTimeChanging(value);
					this.SendPropertyChanging();
					this._ProcessingEndTime = value;
					this.SendPropertyChanged("ProcessingEndTime");
					this.OnProcessingEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="Int NOT NULL")]
		public int Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileGroup_DataFile", Storage="_DataFiles", ThisKey="ID", OtherKey="FileGroupID")]
		public EntitySet<DataFile> DataFiles
		{
			get
			{
				return this._DataFiles;
			}
			set
			{
				this._DataFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataFiles(DataFile entity)
		{
			this.SendPropertyChanging();
			entity.FileGroup = this;
		}
		
		private void detach_DataFiles(DataFile entity)
		{
			this.SendPropertyChanging();
			entity.FileGroup = null;
		}
	}
}
#pragma warning restore 1591
