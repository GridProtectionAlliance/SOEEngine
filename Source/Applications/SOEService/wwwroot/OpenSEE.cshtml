@*******************************************************************************************************
    //  OpenSEE.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
    //  not use this file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  04/21/2016 - Stephen Wills
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using System.Net.Http
@using System.Web
@using Newtonsoft.Json
@using System.Linq
@using System.Data
@using SOE.Model
@using RazorEngine.Templating
@using GSF.Data.Model
@using System.Collections.Generic;
@using System.Collections.Specialized
@using System.Data.SqlClient

@inherits TemplateBase<AppModel>
@{
    const string NextBackForCircuit = "GetPreviousAndNextEventIdsForCircuit";
    const string NextBackForMeter = "GetPreviousAndNextEventIds";

    Layout = null;
    DataContext dataContext = ViewBag.DataContext;

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    int eventID = int.Parse(parameters["EventID"] ?? "-1");
    string navigation = "";
    parameters.TryGetValue("navigation", out navigation);
    string slideShow = "";
    parameters.TryGetValue("slideshow", out slideShow);


    string soeHighlight = (parameters.ContainsKey("SOEHighlight") ? parameters["SOEHighlight"] ?? "-1" : "-1");
    string channels = "";
    EventInfo eventInfo = dataContext.Table<EventInfo>().QueryRecords(restriction: new RecordRestriction("EventID = {0}", eventID)).FirstOrDefault();

    ViewBag.PreviousEventID = -1;
    ViewBag.NextEventID = -1;
    ViewBag.EventInfo = null;
    ViewBag.Channels = Enumerable.Empty<ChannelInfo>();
    ViewBag.SOEPoints = Enumerable.Empty<CycleDataSOEPointView>();

    Dictionary<string, Tuple<Event, Event>> nextBackLookup = new Dictionary<string, Tuple<Event, Event>>();
    List<string> list = new List<string>() { NextBackForCircuit, NextBackForMeter };


    if ((object)eventInfo != null)
    {
        using (IDbCommand cmd = dataContext.Connection.Connection.CreateCommand())
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("@EventID", eventID));
            cmd.CommandTimeout = 300;

            foreach (string procedure in list)
            {
                Event back = null;
                Event next = null;
                int backID = -1;
                int nextID = -1;

                cmd.CommandText = procedure;

                using (IDataReader rdr = cmd.ExecuteReader())
                {
                    rdr.Read();

                    if (!rdr.IsDBNull(0))
                    {
                        backID = rdr.GetInt32(0);
                    }

                    if (!rdr.IsDBNull(1))
                    {
                        nextID = rdr.GetInt32(1);
                    }
                }

                back = dataContext.Table<Event>().QueryRecords(restriction: new RecordRestriction("ID = {0}", backID)).FirstOrDefault();
                next = dataContext.Table<Event>().QueryRecords(restriction: new RecordRestriction("ID = {0}", nextID)).FirstOrDefault();
                nextBackLookup.Add(procedure,Tuple.Create(back, next));
            }
        }
        ViewBag.EventInfo = eventInfo;
        channels = JsonConvert.SerializeObject(dataContext.Table<ChannelInfo>().QueryRecords(restriction: new RecordRestriction("MeterID = {0}", eventInfo.MeterID)));
    }

    ViewBag.SSTime = dataContext.Connection.ExecuteScalar<int?>("SELECT Value FROM Setting WHERE Name = 'openSEE.SlideShowTime'") ?? 3;
    ViewBag.Title = "openSEE Waveform Viewer";
    ViewBag.PageHasMenu = false;
}


<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>openSEE Waveform Viewer</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <link rel="stylesheet" href="@Resources.Root/Shared/Content/jquery-ui.css" />
    <link rel="stylesheet" href="~/Content/OpenSEE.css" type="text/css" />
    <link rel="stylesheet" href="@Resources.Root/Shared/Content/font-awesome.css" />
    <link rel="stylesheet" href="@Resources.Root/Shared/Content/primeui.css" />

    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/jquery.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/jquery-ui.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/primeui.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.blockUI.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.min.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.crosshair.min.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.navigate.min.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.resize.min.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.selection.min.js"></script>
    <script type="text/javascript" src="@Resources.Root/Shared/Scripts/flot/jquery.flot.time.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/jquery.signalR.js"></script>
    <script src="@Resources.Root/Shared/Scripts/gsf.web.client.js"></script>
    <script src="/signalr/hubs"></script>
    <script src="/Scripts/Site.js"></script>

    <script type="text/javascript">
        var eventInfo = JSON.parse('@Raw(JsonConvert.SerializeObject(eventInfo))');
        var seriesList = JSON.parse('@Raw(channels)');
    </script>

    @if ((object)eventInfo != null)
    {
        <script type="text/javascript">
            eventInfo = {
                eventID: @eventInfo.EventID,
                startTime: '@eventInfo.StartTime.ToString("yyyy-MM-dd HH:mm:ss.fffffff")',
                meterName: '@eventInfo.MeterName',
                lineName: '@eventInfo.LineName',
                lineLength: @eventInfo.LineLength.ToString("0.##"),
                milliseconds: '@eventInfo.StartTime.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds.ToString()'
            };
        </script>
    }

    <script type="text/javascript" src="~/Scripts/OpenSEE.js"></script>
</head>
<body>
    <div id="unifiedtooltip" class="ui-widget-content">
        <div id="unifiedtooltiphandle"></div>
        <div id="unifiedtooltipcontent"></div>
        <button class="CloseButton" onclick="showhideTooltip($('#showtooltip')[0]);">X</button>
    </div>

    <div id="accumulatedpoints" class="ui-widget-content">
        <div style="border: black solid 2px;">
            <div id="accumulatedpointshandle"></div>
            <div style="overflow-y: scroll; height: 200px"><div id="accumulatedpointscontent"></div></div>
            <div style="margin: 5px; text-align: right">
                <input class="smallbutton" type="button" value="Remove" onclick="RemovePoint()" />
                <input class="smallbutton" type="button" value="Pop" onclick="popAccumulatedPoints()" />
                <input class="smallbutton" type="button" value="Clear" onclick="clearAccumulatedPoints()" />
            </div>
            <button class="CloseButton" style="top: 2px; right: 2px" onclick="showhidePoints($('#showpoints')[0]);">X</button>
        </div>
    </div>
    <div id="phasor" class="ui-widget-content" style="width:300px; height:320px;">
        <div id="phasorhandle"></div>
        <div id="phasorchart" style="width: 300px; height: 300px; z-index: 1001;">
            <canvas id="phasorCanvas" width="300" height="300" style="display: block;"></canvas>
        </div>
        <button class="CloseButton" onclick="showhidePhasor($('#showphasor')[0]);">X</button>
    </div>
    <div style="width: 100%">
        <table style="width: 100%; table-layout: fixed">
            <tr>
                <td style="text-align: left"><img alt="" src="~/Images/GPA-Logo---30-pix(on-white).png" /></td>
                <td style="text-align: center"><img alt="" src="~/Images/openSEET.png" /></td>
                <td style="text-align: right; vertical-align: top; white-space: nowrap"><img alt="" src="~/Images/GPA-Logo.png" style="display: none" /></td>
            </tr>
            <tr>
                <td colspan="3" style="text-align: center">
                    <div id="TitleData" class="selectable"></div>
                </td>
            </tr>
        </table>
    </div>

    <div class="DockWaveformHeader table-responsive" style="text-align: center">
        <table class="table" style="width: 100%">
            <tr style="width: 75%">
                <td><input class="smallbutton" type="button" value="Reset Zoom" id="resetZoom" /></td>
                <td><input class="smallbutton" type="button" value="Show Points" onclick="showhidePoints(this);" id="showpoints" /></td>
                <td>
                    @NextBackButton(nextBackLookup[NextBackForCircuit].Item1, "circuit-back-ss", "&navigation=circuit&slideshow=back", "<<", true)
                    @NextBackButton(nextBackLookup[NextBackForCircuit].Item1, "circuit-back", "&navigation=circuit", "<", false)
                    @NextBackButton(nextBackLookup[NextBackForMeter].Item1, "meter-back-ss", "&navigation=meter&slideshow=back", "<<", true)
                    @NextBackButton(nextBackLookup[NextBackForMeter].Item1, "meter-back", "&navigation=meter", "<", false)
                    <select id="next-back-selection">
                        <option value="meter" @(navigation == "meter" ? "selected" : "")>Meter</option>
                        <option value="circuit" @(navigation == "circuit" ? "selected" : "")>Circuit</option>
                    </select>
                    @NextBackButton(nextBackLookup[NextBackForCircuit].Item2, "circuit-next", "&navigation=circuit", ">", false)
                    @NextBackButton(nextBackLookup[NextBackForCircuit].Item2, "circuit-next-ss", "&navigation=circuit&slideshow=forward", ">>", true)
                    @NextBackButton(nextBackLookup[NextBackForMeter].Item2, "meter-next", "&navigation=meter", ">", false)
                    @NextBackButton(nextBackLookup[NextBackForMeter].Item2, "meter-next-ss", "&navigation=meter&slideshow=forward", ">>", true)

                </td>

                @if (slideShow != null)
                {
                    <td><input class="smallbutton" type="button" value="Stop Slide Show" onclick="stopSlideShow()" id="stopslideshow" /></td>
                }

                <td><input class="smallbutton" type="button" value="Show Tooltip" onclick="showhideTooltip(this);" id="showtooltip" /></td>


                @*<td><input class="smallbutton" type="button" value="Show Phasor" onclick="showhidePhasor(this);" id="showphasor" /></td>
        <td><input class="smallbutton" type="button" value="Fault Details" onclick="showdetails(this);" id="showdetails" /></td>*@
            </tr>
        </table>
    </div>
    <div id="DockCharts"></div>
</body>
</html>

<script>
    nextBackSelect($('#next-back-selection option:selected').val());

    $('#next-back-selection').change(function () {
        nextBackSelect($('#next-back-selection option:selected').val());
    });

    function nextBackSelect(nextBackType) {
        $('.nextbackbutton').hide();
        $('#' + nextBackType + '-back').show();
        $('#' + nextBackType + '-next').show();
        $('#' + nextBackType + '-back-ss').show();
        $('#' + nextBackType + '-next-ss').show();

    }

    var timeoutVar;

    @if(slideShow != null)
    {
        @Raw(
            "timeoutVar = setTimeout(function(){ " +
            "  if ("+ (slideShow=="forward"? "true": "false").ToString() + "){ " +
            "      document.getElementById('"+navigation+"-next-ss').click()" +
            "  }else{ " +
            "      document.getElementById('" + navigation+"-back-ss').click()" +
            "}},1000* " + ViewBag.SSTime + " );"
         )
    }

    function stopSlideShow() {
        clearTimeout(timeoutVar);
    }
</script>

@helper NextBackButton(Event evt, string id, string postedURLQueryString, string text, bool slideShow)
    {
        if ((object)evt != null)
        {
            string title = evt.StartTime.ToString("yyyy-MM-dd HH:mm:ss.fffffff");
            string url = "?eventid=" + evt.ID + postedURLQueryString;
            <a href="@url" id="@id" class="nextbackbutton smallbutton" title="@(!slideShow ? title : "Slide Show - " + title)" style="padding: 4px 20px">@text</a>
        }
        else
        {
            <a href="#" id="@id" class="nextbackbutton smallbutton-disabled" title="No event" style="padding: 4px 20px">@text</a>
        }
}
